{"version":3,"file":"Image.types.js","sourceRoot":"","sources":["../src/Image.types.ts"],"names":[],"mappings":"AAyEA,MAAM,CAAN,IAAY,eAgCX;AAhCD,WAAY,eAAe;IACzB;;;OAGG;IACH,kCAAe,CAAA;IAEf;;;OAGG;IACH,sCAAmB,CAAA;IAEnB;;;;;OAKG;IACH,sCAAmB,CAAA;IAEnB;;;OAGG;IACH,oCAAiB,CAAA;IAEjB;;;OAGG;IACH,oCAAiB,CAAA;AACnB,CAAC,EAhCW,eAAe,KAAf,eAAe,QAgC1B;AAQD,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,+EAAe,CAAA;IACf,uEAAW,CAAA;IACX,yEAAY,CAAA;IACZ,qEAAU,CAAA;AACZ,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AAED,MAAM,CAAN,IAAY,qBASX;AATD,WAAY,qBAAqB;IAC/B,iEAAQ,CAAA;IACR,mFAAiB,CAAA;IACjB,qFAAkB,CAAA;IAClB,uFAAmB,CAAA;IACnB,mFAAiB,CAAA;IACjB,yFAAoB,CAAA;IACpB,uEAAW,CAAA;IACX,2EAAa,CAAA;AACf,CAAC,EATW,qBAAqB,KAArB,qBAAqB,QAShC;AAED,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,+BAAa,CAAA;IACb,+BAAa,CAAA;IACb,mCAAiB,CAAA;AACnB,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB","sourcesContent":["import { ViewProps } from 'react-native';\n\ninterface AndroidThrowable {\n  class: string;\n  cause: AndroidThrowable | null;\n  message: string;\n}\n\ninterface AndroidGlideException extends AndroidThrowable {\n  origin: AndroidThrowable | null;\n  causes: AndroidThrowable[] | null;\n}\n\nexport interface ImageErrorEventData {\n  error: string;\n  ios?: {\n    code: number;\n    domain: string;\n    description: string;\n    helpAnchor: string | null;\n    failureReason: string | null;\n    recoverySuggestion: string | null;\n  };\n  android?: AndroidGlideException | null;\n}\n\n// New\n\nexport type ImageSource = {\n  /**\n   * A string representing the resource identifier for the image,\n   * which could be an http address, a local file path, or the name of a static image resource.\n   */\n  uri?: string;\n\n  /**\n   * An object representing the HTTP headers to send along with the request for a remote image.\n   */\n  headers?: { [key: string]: string };\n\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  width?: number;\n\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  height?: number;\n};\n\nexport type ImageProps = ViewProps & {\n  /**\n   * The image source (either a remote URL or a local file resource).\n   */\n  source: ImageSource | number;\n\n  /**\n   * Determines how to resize the image when the frame doesn't match the raw image dimensions.\n   * @default \"cover\"\n   */\n  resizeMode?: ImageResizeMode;\n\n  transition: ImageTransition;\n\n  onLoadStart?: () => void;\n  onLoad?: () => void;\n  onProgress?: (event: ImageProgressEventData) => void;\n  onError?: (event: any) => void;\n};\n\nexport enum ImageResizeMode {\n  /**\n   * The image will be resized such that the entire area of the view\n   * is covered by the image, potentially clipping parts of the image.\n   */\n  COVER = 'cover',\n\n  /**\n   * The image will be resized such that it will be completely\n   * visible, contained within the frame of the view.\n   */\n  CONTAIN = 'contain',\n\n  /**\n   * The image will be stretched to fill the entire frame of the view without clipping.\n   * This may change the aspect ratio of the image, distoring it.\n   *\n   * @platform ios\n   */\n  STRETCH = 'stretch',\n\n  /**\n   * The image will be repeated to cover the frame of the view.\n   * The image will keep its size and aspect ratio.\n   */\n  REPEAT = 'repeat',\n\n  /**\n   * The image will be scaled down such that it is completely visible,\n   * if bigger than the area of the view. The image will not be scaled up.\n   */\n  CENTER = 'center',\n}\n\nexport type ImageTransition = {\n  duration?: number;\n  timing?: ImageTransitionTiming;\n  effect?: ImageTransitionEffect;\n};\n\nexport enum ImageTransitionTiming {\n  EASE_IN_OUT = 1,\n  EASE_IN = 2,\n  EASE_OUT = 3,\n  LINEAR = 4,\n}\n\nexport enum ImageTransitionEffect {\n  NONE = 0,\n  CROSS_DISOLVE = 1,\n  FLIP_FROM_LEFT = 2,\n  FLIP_FROM_RIGHT = 3,\n  FLIP_FROM_TOP = 4,\n  FLIP_FROM_BOTTOM = 5,\n  CURL_UP = 6,\n  CURL_DOWN = 7,\n}\n\nexport enum ImageCacheType {\n  NONE = 'none',\n  DISK = 'disk',\n  MEMORY = 'memory',\n}\n\nexport type ImageLoadEventData = {\n  cacheType: ImageCacheType;\n  source: {\n    url: string;\n    width: number;\n    height: number;\n    mediaType: string | null;\n  };\n};\n\nexport type ImageProgressEventData = {\n  loaded: number;\n  total: number;\n};\n"]}